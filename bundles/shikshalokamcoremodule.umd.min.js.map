{"version":3,"sources":["ng://shikshalokamcoremodule/lib/components/navbar/navbar.component.ts","ng://shikshalokamcoremodule/lib/components/sidenav/sidenav.component.ts","ng://shikshalokamcoremodule/lib/components/responsive-navbar/responsive-navbar.component.ts","ng://shikshalokamcoremodule/lib/components/program-sidenav/program-sidenav.component.ts","ng://shikshalokamcoremodule/lib/services/translate-service/translate.service.ts","ng://shikshalokamcoremodule/lib/pipes/translate-pipe/translate.pipe.ts","ng://shikshalokamcoremodule/lib/pipes/camelcase-pipe/camelcase.pipe.ts","ng://shikshalokamcoremodule/lib/pipes/no-value-pipe/no-value.pipe.ts","ng://shikshalokamcoremodule/lib/services/interceptor-service/interceptor.service.ts","ng://shikshalokamcoremodule/lib/services/utility-service/utility.service.ts","ng://shikshalokamcoremodule/lib/services/api-service/api.service.ts","ng://shikshalokamcoremodule/lib/core.module.ts"],"names":["NavbarComponent","this","showDropdown","Logout","EventEmitter","prototype","ngOnInit","openDropdown","onSignout","emit","Component","args","selector","template","Input","Output","SidenavComponent","console","log","programsShow","ResponsiveNavbarComponent","openDrawer","openSideNav","ProgramSidenavComponent","program","currentProgramIndex","programSelect","assessments","i","TranslateService","http","language","use","lang","_this","Promise","resolve","reject","langPath","get","subscribe","translation","Object","assign","error","Injectable","HttpClient","TranslatePipe","translate","resarray","obj","transform","key","indexOf","array","split","forEach","element","Pipe","name","pure","CamelCasePipe","camelCase","trim","newText","length","test","toUpperCase","NoValuePipe","value","ApiInterceptor","intercept","req","next","authToken","localStorage","getItem","url","includes","authReq_1","clone","setHeaders","internal-access-token","handle","authReq","X-authenticated-user-token","UtilityService","location","spinner","onBack","back","loaderShow","show","loaderHide","hide","toGroup","inputs","group","input","field","createFormArray","validation","required","FormControl","Validators","FormGroup","elements","FormArray","providedIn","Location","NgxSpinnerService","ApiService","getJSON","post","updateData","upload","file","formData","FormData","Array","from","f","append","reportProgress","observe","CoreModule","forRoot","ngModule","providers","NgModule","declarations","imports","NgxSpinnerModule","CommonModule","RouterModule","HttpClientModule","MatButtonModule","MatMenuModule","MatIconModule","HttpModule","MatCardModule","MatDividerModule","MatTooltipModule","provide","HTTP_INTERCEPTORS","useClass","multi","exports"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n  showDropdown = false;\n  @Input() dropdownLabel ;\n  @Input() currentUser: any;\n  @Input() logo ;\n  @Output() Logout = new EventEmitter ();\n  constructor() {\n  }\n  ngOnInit() {\n  }\n  openDropdown() {\n    this.showDropdown = !this.showDropdown;\n  }\n  onSignout()\n  {\n    this.Logout.emit(true);\n  }\n}\n\n\n\n","import { Component, OnInit, Input } from '@angular/core';\n@Component({\n  selector: 'app-sidenav',\n  templateUrl: './sidenav.component.html',\n  styleUrls: ['./sidenav.component.scss']\n})\nexport class SidenavComponent implements OnInit {\n  @Input() link: any;\n  @Input() programsShow;\n  programId;\n  assessmentId;\n  constructor() { \n  }\n\n  ngOnInit() {\n    console.log(this.programsShow)\n  }\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-responsive-navbar',\n  templateUrl: './responsive-navbar.component.html',\n  styleUrls: ['./responsive-navbar.component.scss']\n})\nexport class ResponsiveNavbarComponent implements OnInit {\n  @Output() openDrawer = new EventEmitter();\n  @Input() currentUser: any;\n  @Input() logo ;\n  @Output() Logout = new EventEmitter ();\n  constructor() {\n  }\n  ngOnInit() {\n    this.openSideNav();\n  }\n  onSignout()\n  {\n    this.Logout.emit(true);\n  }\n  openSideNav(){\n    this.openDrawer.emit(true);\n  }\n\n}\n","import { Component, OnInit, Input , Output, EventEmitter} from '@angular/core';\n\n@Component({\n  selector: 'app-program-sidenav',\n  templateUrl: './program-sidenav.component.html',\n  styleUrls: ['./program-sidenav.component.scss']\n})\nexport class ProgramSidenavComponent implements OnInit {\n  @Input() result: any;\n  currentProgramIndex: number;\n\n  constructor() { }\n\n  @Output() program = new EventEmitter();\n\n  ngOnInit() {\n    this.currentProgramIndex = 0;\n  }\n\n  programSelect(assessments, i){\n    this.currentProgramIndex = i;\n    this.program.emit(assessments);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class TranslateService {\n\n  language: any = {};\n\n  constructor(private http: HttpClient) { }\n\n  use(lang: string): Promise<{}> {\n    return new Promise<{}>((resolve, reject) => {\n      const langPath = `assets/i18n/${lang || 'en'}.json`;\n      // const langPath = `assets/i18n/od.json`;\n\n      this.http.get<{}>(langPath).subscribe(\n        translation => {\n          this.language = Object.assign({}, translation || {});\n          resolve(this.language);\n        },\n        error => {\n          this.language = {};\n          resolve(this.language);\n        }\n      );\n    });\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TranslateService } from '../../services/translate-service/translate.service';\n\n@Pipe({\n  name: 'translate',\n  pure: false\n})\nexport class TranslatePipe implements PipeTransform {\n  resarray='';\n  obj = {};\n  constructor(private translate: TranslateService) {}\n  transform(key: any): any {\n    if(key.indexOf('.') === -1)\n    {\n      return this.translate['language'][key] || key;\n    }\n    else{\n        var array = key.split(\".\");\n        this.resarray = this.translate['language'] ;\n        array.forEach(element => {\n          if(this.resarray){\n            this.resarray = this.resarray[element];\n          }\n        });\n      return this.resarray || key;\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'camelcase',\n  pure: false\n})\nexport class CamelCasePipe implements PipeTransform {\n  constructor() {}\n  transform(camelCase: any): any {\n   \n      if (camelCase == null || camelCase == \"\") {\n        return camelCase;\n      }\n  \n      camelCase = camelCase.trim();\n      var newText = \"\";\n      for (var i = 0; i < camelCase.length; i++) {\n        if (/[A-Z]/.test(camelCase[i])\n            && i != 0\n            && /[a-z]/.test(camelCase[i-1])) {\n          newText += \" \";\n        }\n        if (i == 0 && /[a-z]/.test(camelCase[i]))\n        {\n          newText += camelCase[i].toUpperCase();\n        } else {\n          newText += camelCase[i];\n        }\n      }\n  \n      return newText;\n    }\n  }\n\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'blank',\n  pure: false\n})\nexport class NoValuePipe implements PipeTransform {\n  constructor() {}\n  transform(value: any): any {\n   \n      if (value == null || value == \"\") {\n        return \"-NA-\";\n      }\n      return value;\n    }\n  }\n\n","\nimport { Injectable } from \"@angular/core\";\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpInterceptor,\n} from \"@angular/common/http\";\n\n@Injectable()\nexport class ApiInterceptor implements HttpInterceptor {\n\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    const downloadReportUrl = 'programsSubmissionStatus/DCPCR?evidenceId='\n    const authToken = localStorage.getItem('auth-token');\n    if(req.url.includes(downloadReportUrl))\n      {\n        const authReq = req.clone({setHeaders:{\"internal-access-token\" : localStorage.getItem('downloadReport-token')}});\n        return next.handle(authReq);\n      }\n      const authReq = req.clone({ setHeaders: { \"X-authenticated-user-token\": authToken } })\n        return next.handle(authReq);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { FormControl, Validators, FormGroup, FormArray } from '@angular/forms';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilityService {\n  constructor(private location :Location,private spinner: NgxSpinnerService) { }\n\n  onBack(){\n    this.location.back();\n  }\n  loaderShow(){\n    this.spinner.show();\n  }\n  loaderHide(){\n    this.spinner.hide();\n  }\n  toGroup(inputs) {\n\n    let group: any = {};\n   \n    inputs.forEach(inputs => {\n      if(inputs.input == \"array\")\n      {\n        group[inputs.field] = this.createFormArray(inputs);\n      }\n      else{\n        group[inputs.field] = inputs.validation.required ? new FormControl(inputs.value || '', Validators.required)\n        : new FormControl(inputs.value || '');\n      }\n    });\n    return new FormGroup(group);\n  }\n  createFormArray(inputs){\n\n    let elements : any = [];\n    inputs.array.forEach(element => {\n      elements[element['field']] = element.validation.required ? new FormControl(element.value || '', Validators.required)\n                                            : new FormControl(element.value || '');\n    });\n\n    return new FormArray(elements);\n  }\n}\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(private http: HttpClient) { }\n\n  get(url : string){\n    return this.http.get(url);\n  }\n  getJSON(url : string){\n    return this.http.get( url);\n\n  }\n  post(url:string,updateData:any){\n    return this.http.post(url , updateData)\n  }\n  upload(url: string, file : [] , name :string) {\n    const formData: FormData = new FormData();\n    if (file) {\n      Array.from(file).forEach(f => {\n            formData.append(name,f)\n          })\n    }\n    console.log(formData)\n    return this.http.post(url, formData , {reportProgress: true, observe: 'events'});\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { MatDividerModule,MatCardModule,MatButtonModule,MatMenuModule ,MatIconModule,MatTooltipModule } from '@angular/material';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { SidenavComponent } from './components/sidenav/sidenav.component';\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport { ResponsiveNavbarComponent } from './components/responsive-navbar/responsive-navbar.component';\nimport { RouterModule } from '@angular/router';\nimport { HttpModule } from '@angular/http';\nimport { ProgramSidenavComponent } from './components/program-sidenav/program-sidenav.component';\nimport { TranslatePipe } from './pipes/translate-pipe/translate.pipe';\nimport { CamelCasePipe } from './pipes/camelcase-pipe/camelcase.pipe';\nimport { NoValuePipe } from './pipes/no-value-pipe/no-value.pipe';\nimport { ApiInterceptor } from './services/interceptor-service/interceptor.service';\nimport { TranslateService } from './services/translate-service/translate.service';\nimport { UtilityService } from './services/utility-service/utility.service';\nimport { ApiService } from './services/api-service/api.service';\n@NgModule({\n  declarations: [\n    TranslatePipe,\n    CamelCasePipe,\n    NoValuePipe,\n    NavbarComponent,\n    SidenavComponent,\n    ResponsiveNavbarComponent,\n    ProgramSidenavComponent\n  ],\n  imports: [\n    NgxSpinnerModule,\n    CommonModule,\n    RouterModule,\n    HttpClientModule,\n    MatButtonModule,\n    MatMenuModule,\n    MatIconModule,\n    HttpModule,\n    MatCardModule,\n    HttpClientModule,\n    MatDividerModule,\n    MatTooltipModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ApiInterceptor,\n      multi: true\n    },\n  ],\n  exports: [\n    TranslatePipe,\n    NavbarComponent,\n    SidenavComponent,\n    ResponsiveNavbarComponent,\n    CamelCasePipe,\n    NoValuePipe,\n    ProgramSidenavComponent,\n    CommonModule,\n  ]\n})\nexport class CoreModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CoreModule,\n      providers: [TranslateService,UtilityService,ApiInterceptor,ApiService]\n    };\n  }\n}\n"]}